using Domain.Aggrgates.CustomerAggregate;
using Domain.Aggrgates.HandlingEventAggregate;
using Domain.Aggrgates.HandlingIncidentAggregate;
using Domain.Persistency;
using Domain.SeedWork;

namespace Domain.Aggrgates.CargoAggregate
{
    public class Cargo : RootEntity, IInjectServiceProvider
    {
        public IShippingDbContext ShippingDbContext { get ; set ; } = null!;

        /* This constructor is used by EF Core while
           getting the entity from database */
        private Cargo() { }

        internal Cargo(Customer customer, DeliverySpecification deliveryGoal)
        {
            Customer = customer;
            DeliveryGoal = deliveryGoal;
        }


        /// <summary>
        /// Key -> auto generated by EF
        /// </summary>
        public int TrackingId { get; private set; }
   
        public Customer Customer { get; private set; }
    
        public DeliverySpecification DeliveryGoal { get; private set; }

        public IEnumerable<HandlingEvent> GetDeliveryHistory()
        {
            return ShippingDbContext.HandlingEvents.
                Where(h => h.TrackingId == TrackingId).
                ToList();
        }
        
        public void ChangeDeliveryGoal(DeliverySpecification deliveryGoal)
        {
            DeliveryGoal = deliveryGoal;
        }
    }
}
